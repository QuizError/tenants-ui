import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { UnitSectionService } from '../../../services/unit-section-service';
import { RentalService } from '../../../services/rental-service';
import { UnitSection } from '../../../interfaces/unit-section';
import { Rental } from '../../../interfaces/rental';

@Component({
  selector: 'app-add-rental-component',
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './add-rental-component.html',
  styleUrl: './add-rental-component.css'
})
export class AddRentalComponent implements OnInit {
  rentalForm: FormGroup;
  availableUnits: UnitSection[] = [];
  clientUid: string | null = null;
  userUid: string = ''; // This should come from auth service
  loading: boolean = false;
  submitting: boolean = false;

  constructor(
    private fb: FormBuilder,
    private route: ActivatedRoute,
    private router: Router,
    private unitSectionService: UnitSectionService,
    private rentalService: RentalService
  ) {
    this.rentalForm = this.fb.group({
      unitSectionUid: ['', Validators.required],
      startDate: ['', Validators.required],
      endDate: ['', Validators.required]
    });
  }

  ngOnInit(): void {
    console.log('ngOnInit started');
    this.clientUid = this.route.snapshot.paramMap.get('clientUid');
    console.log('Client UID from route:', this.clientUid);
    
    // Get user data from local storage
    const savedUser = localStorage.getItem('employeeApp');    
    console.log('Saved user from localStorage:', savedUser);
    
    if (savedUser) {
      try {
        const user = JSON.parse(savedUser);
        this.userUid = user.uid;
        console.log('Parsed user UID:', this.userUid);
      } catch (e) {
        console.error('Error parsing user data:', e);
      }
    } else {
      console.error('No user data found in localStorage');
    }
    
    if (this.clientUid && this.userUid) {
      console.log('Both clientUid and userUid are available, loading units...');
      this.loadAvailableUnits();
    } else {
      console.log('Missing required IDs - clientUid:', this.clientUid, 'userUid:', this.userUid);
    }
  }

  loadAvailableUnits(): void {
    console.log('loadAvailableUnits called with userUid:', this.userUid);
    this.loading = true;
    
    this.unitSectionService.getAvailableUnitSectionByUserUid(this.userUid).subscribe({
      next: (units) => {
        console.log('API Response - Units:', units);
        this.availableUnits = units || [];
        console.log('Available units after assignment:', this.availableUnits);
        this.loading = false;
      },
      error: (error) => {
        console.error('Error in loadAvailableUnits - Status:', error?.status);
        console.error('Error details:', error);
        if (error?.error) {
          console.error('Server response:', error.error);
        }
        this.loading = false;
      },
      complete: () => {
        console.log('loadAvailableUnits completed');
      }
    });
  }

  onSubmit(): void {
    if (this.rentalForm.valid && this.clientUid) {
      this.submitting = true;
      
      const rentalData: Rental = {
        uid: '', // Will be generated by backend
        clientUid: this.clientUid,
        unitSectionUid: this.rentalForm.value.unitSectionUid,
        startDate: this.rentalForm.value.startDate,
        endDate: this.rentalForm.value.endDate
      };

      this.rentalService.postRentalData(rentalData).subscribe({
        next: (response) => {
          console.log('Rental created successfully:', response);
          this.router.navigate(['/clients/view', this.clientUid]);
        },
        error: (error) => {
          console.error('Error creating rental:', error);
          this.submitting = false;
        }
      });
    }
  }

  goBack(): void {
    this.router.navigate(['/clients/view', this.clientUid]);
  }

  getSelectedUnit(): UnitSection | undefined {
    const selectedUid = this.rentalForm.get('unitSectionUid')?.value;
    return this.availableUnits.find(unit => unit.uid === selectedUid);
  }

  formatCurrency(amount: number): string {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(amount);
  }
}
