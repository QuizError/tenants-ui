import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { UnitSectionService } from '../../../services/unit-section-service';
import { RentalService } from '../../../services/rental-service';
import { UnitSection } from '../../../interfaces/unit-section';
import { Rental } from '../../../interfaces/rental';

@Component({
  selector: 'app-add-rental-modal',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './add-rental-modal.component.html',
  styleUrl: './add-rental-modal.component.css'
})
export class AddRentalModalComponent implements OnInit {
  @Input() isVisible: boolean = false;
  @Input() clientUid: string = '';
  @Output() closeModal = new EventEmitter<void>();
  @Output() rentalAdded = new EventEmitter<Rental>();

  rentalForm: FormGroup;
  availableUnits: UnitSection[] = [];
  userUid: string = ''; // This should come from auth service
  loading: boolean = false;
  submitting: boolean = false;

  constructor(
    private fb: FormBuilder,
    private unitSectionService: UnitSectionService,
    private rentalService: RentalService
  ) {
    this.rentalForm = this.fb.group({
      unitSectionUid: ['', Validators.required],
      startDate: ['', Validators.required],
      endDate: ['', Validators.required]
    });
  }

  ngOnInit(): void {
    // Get user data from local storage
    const savedUser = localStorage.getItem('employeeApp');
    if (savedUser) {
      try {
        const user = JSON.parse(savedUser);
        this.userUid = user.uid;
        console.log('User UID in modal:', this.userUid);
        this.loadAvailableUnits();
      } catch (e) {
        console.error('Error parsing user data in modal:', e);
      }
    } else {
      console.error('No user data found in localStorage in modal');
    }
  }

  loadAvailableUnits(): void {
    this.loading = true;
    this.unitSectionService.getAvailableUnitSectionByUserUid(this.userUid).subscribe({
      next: (units) => {
        this.availableUnits = units;
        console.log(this.availableUnits);
        this.loading = false;
      },
      error: (error) => {
        console.error('Error loading available units:', error);
        this.loading = false;
      }
    });
  }

  onSubmit(): void {
    if (this.rentalForm.valid && this.clientUid) {
      this.submitting = true;
      
      const rentalData: Rental = {
        uid: '', // Will be generated by backend
        clientUid: this.clientUid,
        unitSectionUid: this.rentalForm.value.unitSectionUid,
        startDate: this.rentalForm.value.startDate,
        endDate: this.rentalForm.value.endDate
      };

      this.rentalService.postRentalData(rentalData).subscribe({
        next: (response: any) => {
          console.log('Rental created successfully:', response);
          this.rentalAdded.emit(response.data || response);
          this.closeModalHandler();
        },
        error: (error) => {
          console.error('Error creating rental:', error);
          this.submitting = false;
        }
      });
    }
  }

  closeModalHandler(): void {
    this.rentalForm.reset();
    this.submitting = false;
    this.closeModal.emit();
  }

  onBackdropClick(event: Event): void {
    if (event.target === event.currentTarget) {
      this.closeModalHandler();
    }
  }

  getSelectedUnit(): UnitSection | undefined {
    const selectedUid = this.rentalForm.get('unitSectionUid')?.value;
    return this.availableUnits.find(unit => unit.uid === selectedUid);
  }

  formatCurrency(amount: number): string {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(amount);
  }

  trackByUid(index: number, item: UnitSection): string {
    return item.uid;
  }
}
